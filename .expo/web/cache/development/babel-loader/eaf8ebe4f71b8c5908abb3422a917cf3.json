{"ast":null,"code":"import _slicedToArray from \"@babel/runtime/helpers/slicedToArray\";\n\nvar _this = this,\n    _jsxFileName = \"C:\\\\Users\\\\19don\\\\OneDrive\\\\Desktop\\\\Athlete-App\\\\Athlete-App\\\\src\\\\screens\\\\CoachQScreen.js\";\n\nimport React, { useState, useEffect } from \"react\";\nimport View from \"react-native-web/dist/exports/View\";\nimport StyleSheet from \"react-native-web/dist/exports/StyleSheet\";\nimport Text from \"react-native-web/dist/exports/Text\";\nimport TouchableOpacity from \"react-native-web/dist/exports/TouchableOpacity\";\nimport FlatList from \"react-native-web/dist/exports/FlatList\";\nimport CoachQuestionsInput from \"../components/CoachQuestionsInput\";\nimport AddQuestionButton from \"../components/AddQuestionButton\";\nimport { firebase } from \"../../firebase/config\";\nimport Animated from \"react-native-reanimated\";\nimport Keyboard from \"react-native-web/dist/exports/Keyboard\";\nimport { AntDesign } from '@expo/vector-icons';\n\nvar CoachQScreen = function CoachQScreen(props) {\n  var _useState = useState(''),\n      _useState2 = _slicedToArray(_useState, 2),\n      questionText = _useState2[0],\n      setQuestionText = _useState2[1];\n\n  var _useState3 = useState([]),\n      _useState4 = _slicedToArray(_useState3, 2),\n      questionsDatabase = _useState4[0],\n      setQuestionsDatabase = _useState4[1];\n\n  var questionRef = firebase.firestore().collection('questions');\n  useEffect(function () {\n    questionRef.orderBy('createdAt', 'desc').onSnapshot(function (querySnapshot) {\n      var newQuestions = [];\n      querySnapshot.forEach(function (doc) {\n        var question = doc.data();\n        question.id = doc.id;\n        newQuestions.push(question);\n      });\n      setQuestionsDatabase(newQuestions);\n    }, function (error) {\n      console.log(error);\n    });\n  }, []);\n\n  var onQuestionAddPress = function onQuestionAddPress() {\n    if (questionText && questionText.length > 0) {\n      var timestamp = firebase.firestore.FieldValue.serverTimestamp();\n      var data = {\n        question: questionText,\n        createdAt: timestamp\n      };\n      questionRef.add(data).then(function (_doc) {\n        setQuestionText('');\n        Keyboard.dismiss();\n      }).catch(function (error) {\n        alert(error);\n      });\n    }\n  };\n\n  var onDeletePress = function onDeletePress(_ref) {\n    var item = _ref.item;\n    console.log(item);\n  };\n\n  var renderQuestion = function renderQuestion(_ref2) {\n    var item = _ref2.item,\n        index = _ref2.index;\n    return React.createElement(View, {\n      style: styles.questionContainer,\n      __self: _this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 72,\n        columnNumber: 9\n      }\n    }, React.createElement(Text, {\n      style: styles.textStyle,\n      __self: _this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 73,\n        columnNumber: 13\n      }\n    }, index, \". \", item.question), React.createElement(TouchableOpacity, {\n      onPress: onDeletePress(item),\n      __self: _this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 77,\n        columnNumber: 13\n      }\n    }, React.createElement(AntDesign, {\n      name: \"delete\",\n      size: 24,\n      color: \"red\",\n      __self: _this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 80,\n        columnNumber: 15\n      }\n    })));\n  };\n\n  return React.createElement(View, {\n    style: styles.viewStyle,\n    __self: _this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 90,\n      columnNumber: 5\n    }\n  }, React.createElement(Text, {\n    style: styles.titleTextStyle,\n    __self: _this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 91,\n      columnNumber: 7\n    }\n  }, \"Team Questions\"), React.createElement(CoachQuestionsInput, {\n    text: \"Enter a question...\",\n    term: questionText,\n    onTermChange: setQuestionText,\n    __self: _this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 92,\n      columnNumber: 7\n    }\n  }), React.createElement(TouchableOpacity, {\n    onPress: onQuestionAddPress,\n    style: styles.buttonStyle,\n    activeOpacity: 0.7,\n    __self: _this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 94,\n      columnNumber: 7\n    }\n  }, React.createElement(Text, {\n    style: styles.textStyle,\n    __self: _this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 99,\n      columnNumber: 9\n    }\n  }, \" Add Question \")), React.createElement(Text, {\n    style: styles.titleTextStyle2,\n    __self: _this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 102,\n      columnNumber: 7\n    }\n  }, \"Current Questions\"), questionsDatabase && React.createElement(View, {\n    style: styles.listContainer,\n    __self: _this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 104,\n      columnNumber: 17\n    }\n  }, React.createElement(FlatList, {\n    data: questionsDatabase,\n    keyExtractor: function keyExtractor(item) {\n      return item.id;\n    },\n    renderItem: renderQuestion,\n    removeClippedSubviews: true,\n    __self: _this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 105,\n      columnNumber: 21\n    }\n  })));\n};\n\nvar styles = StyleSheet.create({\n  viewStyle: {\n    paddingTop: 20,\n    paddingHorizontal: 10,\n    backgroundColor: \"black\",\n    flex: 1\n  },\n  buttonStyle: {\n    height: 40,\n    width: 175,\n    borderColor: \"#8ecfff\",\n    marginBottom: 30,\n    borderRadius: 50,\n    justifyContent: 'center',\n    alignItems: 'center',\n    borderWidth: 5\n  },\n  textStyle: {\n    fontWeight: \"bold\",\n    color: \"#8ecfff\",\n    fontSize: 15,\n    fontFamily: \"goodTimes\"\n  },\n  titleTextStyle: {\n    fontWeight: \"bold\",\n    color: \"#8ecfff\",\n    fontSize: 30,\n    fontFamily: \"goodTimes\"\n  },\n  titleTextStyle2: {\n    fontWeight: \"bold\",\n    color: \"#8ecfff\",\n    fontSize: 25,\n    fontFamily: \"goodTimes\"\n  },\n  listContainer: {\n    padding: 10\n  },\n  questionContainer: {\n    marginTop: 16,\n    borderBottomColor: '#cccccc',\n    borderBottomWidth: 1,\n    paddingBottom: 16,\n    flexDirection: 'row',\n    justifyContent: 'space-between'\n  }\n});\nexport default CoachQScreen;","map":{"version":3,"sources":["C:/Users/19don/OneDrive/Desktop/Athlete-App/Athlete-App/src/screens/CoachQScreen.js"],"names":["React","useState","useEffect","CoachQuestionsInput","AddQuestionButton","firebase","Animated","AntDesign","CoachQScreen","props","questionText","setQuestionText","questionsDatabase","setQuestionsDatabase","questionRef","firestore","collection","orderBy","onSnapshot","querySnapshot","newQuestions","forEach","doc","question","data","id","push","error","console","log","onQuestionAddPress","length","timestamp","FieldValue","serverTimestamp","createdAt","add","then","_doc","Keyboard","dismiss","catch","alert","onDeletePress","item","renderQuestion","index","styles","questionContainer","textStyle","viewStyle","titleTextStyle","buttonStyle","titleTextStyle2","listContainer","StyleSheet","create","paddingTop","paddingHorizontal","backgroundColor","flex","height","width","borderColor","marginBottom","borderRadius","justifyContent","alignItems","borderWidth","fontWeight","color","fontSize","fontFamily","padding","marginTop","borderBottomColor","borderBottomWidth","paddingBottom","flexDirection"],"mappings":"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","sourcesContent":["import React, {useState, useEffect} from \"react\";\r\nimport { View, StyleSheet, Text, TouchableOpacity, FlatList} from \"react-native\";\r\nimport CoachQuestionsInput from \"../components/CoachQuestionsInput\";\r\nimport AddQuestionButton from \"../components/AddQuestionButton\";\r\nimport  { firebase } from \"../../firebase/config\";\r\nimport Animated from \"react-native-reanimated\";\r\nimport { Keyboard } from \"react-native\";\r\nimport { AntDesign } from '@expo/vector-icons';\r\n\r\nconst CoachQScreen = (props) => {\r\n  //Creating a variable term to track state of the search bar\r\n  const [questionText, setQuestionText] = useState('')\r\n\r\n\r\n  const [questionsDatabase, setQuestionsDatabase] = useState([])\r\n\r\n  const questionRef = firebase.firestore().collection('questions')\r\n  //const userID = props.extraData.id //NOT sure about this\r\n  // WILL NEED TO PASS IN THE USER FROM THE APP.JS FILE\r\n  // look at the first firebase tutorial we did\r\n\r\n  useEffect(() => {\r\n      questionRef\r\n          //.where(\"authorID\", \"==\", userID)\r\n          .orderBy('createdAt', 'desc')\r\n          .onSnapshot(\r\n              querySnapshot => {\r\n                  const newQuestions = []\r\n                  querySnapshot.forEach(doc => {\r\n                      const question = doc.data()\r\n                      question.id = doc.id\r\n                      newQuestions.push(question)\r\n                  });\r\n                  setQuestionsDatabase(newQuestions)\r\n              },\r\n              error => {\r\n                  console.log(error)\r\n              }\r\n          )\r\n  }, [])\r\n\r\n  const onQuestionAddPress = () => {\r\n    if (questionText && questionText.length > 0) {\r\n      const timestamp = firebase.firestore.FieldValue.serverTimestamp();\r\n      const data = {\r\n        question: questionText,\r\n        //authorID: userID,\r\n        createdAt: timestamp,\r\n      };\r\n      questionRef\r\n        .add(data)\r\n        .then(_doc => {\r\n          setQuestionText('')\r\n          Keyboard.dismiss()\r\n        })\r\n        .catch((error) => {\r\n          alert(error)\r\n        })\r\n    }\r\n  }\r\n      \r\n\r\n  const onDeletePress = ({item}) => {\r\n    console.log(item)\r\n    \r\n  }\r\n\r\n\r\n  const renderQuestion = ({item, index}) => {\r\n    //console.log(item)\r\n    return (\r\n        <View style={styles.questionContainer}>\r\n            <Text style={styles.textStyle}>\r\n                {index}. {item.question}\r\n                \r\n            </Text>\r\n            <TouchableOpacity\r\n              onPress={onDeletePress(item)} //Not sure how to pass down these props to onDeletePress\r\n            >\r\n              <AntDesign name=\"delete\" size={24} color=\"red\" />\r\n            </TouchableOpacity>\r\n            \r\n\r\n            \r\n        </View>\r\n    )\r\n  }\r\n\r\n  return (\r\n    <View style={styles.viewStyle}>\r\n      <Text style={styles.titleTextStyle}>Team Questions</Text>\r\n      <CoachQuestionsInput text=\"Enter a question...\" term={questionText} onTermChange={setQuestionText} />\r\n      \r\n      <TouchableOpacity\r\n        onPress={onQuestionAddPress}\r\n        style={styles.buttonStyle}\r\n        activeOpacity={0.7}\r\n        >\r\n        <Text style={styles.textStyle}> Add Question </Text>\r\n      </TouchableOpacity>\r\n\r\n      <Text style={styles.titleTextStyle2} >Current Questions</Text>\r\n      { questionsDatabase && (\r\n                <View style={styles.listContainer}>\r\n                    <FlatList\r\n                        data={questionsDatabase}\r\n                        keyExtractor={(item) => item.id}\r\n                        renderItem={renderQuestion}\r\n                        removeClippedSubviews={true}\r\n                    />\r\n                 </View>\r\n      )}\r\n    </View>\r\n    //SINGLE QUESTION ENTERING BOX WITH CURRENT QUESTIONS LISTED BELOW\r\n    //Need to add question to firebase on submit\r\n  );\r\n};\r\n\r\nconst styles = StyleSheet.create({\r\n  viewStyle: {\r\n    paddingTop: 20,\r\n    paddingHorizontal:10,\r\n    backgroundColor: \"black\",\r\n    flex: 1,\r\n  },\r\n  buttonStyle: {\r\n    height: 40,\r\n    width: 175,\r\n    borderColor: \"#8ecfff\",\r\n    marginBottom: 30,\r\n    borderRadius: 50,\r\n    justifyContent: 'center',\r\n    alignItems: 'center',\r\n    borderWidth: 5\r\n  },\r\n  textStyle: {\r\n    fontWeight: \"bold\",\r\n    color: \"#8ecfff\",\r\n    fontSize: 15,\r\n    fontFamily: \"goodTimes\",\r\n  },\r\n  titleTextStyle: {\r\n    fontWeight: \"bold\",\r\n    color: \"#8ecfff\",\r\n    fontSize: 30,\r\n    fontFamily: \"goodTimes\"\r\n  },\r\n  titleTextStyle2: {\r\n    fontWeight: \"bold\",\r\n    color: \"#8ecfff\",\r\n    fontSize: 25,\r\n    fontFamily: \"goodTimes\"\r\n  },\r\n  listContainer: {\r\n    padding: 10,\r\n},\r\n  questionContainer: {\r\n  marginTop: 16,\r\n  borderBottomColor: '#cccccc',\r\n  borderBottomWidth: 1,\r\n  paddingBottom: 16,\r\n  flexDirection: 'row',\r\n  justifyContent: 'space-between'\r\n},\r\n});\r\n\r\nexport default CoachQScreen;\r\n"]},"metadata":{},"sourceType":"module"}